// @media query based wrappers
media($query='screen', $allowFlatten=false) {
    if ($media-queries-support) {
        @media $query {
            {block}
        }
    }
    else if ($query in $media-queries-flatten  ||  $allowFlatten) {
        @media screen {
            {block}
        }
    }
}


$media-queries-support ?= true;
$media-queries-flatten ?= '';


// Add retina-only styles
// Usage:
// +retina($minRes){
//   ...styles...
// }
retina($res) {
    $res = $res || 1.5dppx;
    $res = (unit($res) == '') ? (round($res,3))dppx : $res;
    // NOTE: autoprefixer converts dpi values to webkit scaling factors
    @media (min-resolution: $res ) {
        {block}
    }
}




// ===============================================================================
// Icons!
$iconfont_name ?=  'icons';
$iconfont_font-family ?= $iconfont_name, Arial, Helvetica, sans-serif;

_icon( $icon=null ) {
    display: inline-block;
    text-indent: 0;
    text-align: center;
    vertical-align: top;
    _iconFontStyling();
    content: $icon  if $icon;
}

_iconFontStyling() {
    font-family: $iconfont_font-family;
    speak: none;
    font-weight: normal;
    font-style: normal;
    white-space: nowrap;
    -webkit-font-smoothing: antialiased; // fix for light text on dark background from beeing smudgy in webkit/mac
    -moz-osx-font-smoothing: grayscale;
    letter-spacing: 0;
}


if ( $icons is defined ) {
    // convert all icon values from Stylus 'ident' to quoted String
    for $n,$c in $icons { $icons[$n] = ''+$c; }

    $icons.bullet-disc =   '\2022';
    $icons.bullet-square = '\25aa';

    $icons.space-normal =  '\00a0'; // (NO-BREAK space) (0.28em)

    $icons.space-half =    '\2002'; // 1/2em  (EN space
    $icons.space-em =      '\2003'; // 1em    (EM space)
    $icons.space-third =   '\2004'; // 1/3em  (THREE-PER-EM space)
    $icons.space-fourth =  '\2005'; // 1/4em  (FOUR-PER-EM space)
    $icons.space-sixth =   '\2006'; // 1/6em  (SIX-PER-EM space)
    // $icons.space-figure =        '\2007';
    // $icons.space-punctuation =   '\2008';
    $icons.space-fifth =   '\2009'; // 1/5em  (THIN space)
    $icons.space-hair =    '\200A'; // 1/12em (HAIR space)
}


// quote marks for use with blockquote
$quote_upper6 =   '\2018';
$quote_upper9 =   '\2019';
$quote_lower9 =   '\201a';
$quote_upper66 =  '\201c';
$quote_upper99 =  '\201d';
$quote_lower99 =  '\201e';
// icelandic
$quote_open_is =        $quote_lower99;
$quote_close_is =       $quote_upper66;
$quote_openSingle_is =  $quote_lower9;
$quote_closeSingle_is = $quote_upper6;
// english
$quote_open_en =        $quote_upper66;
$quote_close_en =       $quote_upper99;
$quote_openSingle_en =  $quote_upper6;
$quote_closeSingle_en = $quote_upper9;

// Usage:
//   _addQuotationMarks( en, 'is' ); // adds quotation marks for 'en' and 'is'
_addQuotationMarks( langs... ) {
    if ( en in langs ) {
        &:lang(en)::before { content: $quote_open_en; }
        &:lang(en)::after { content: $quote_close_en; }
    }
    if ( 'is' in langs ) {
        &:lang(\is)::before { content: $quote_open_is; }
        &:lang(\is)::after { content: $quote_close_is; }
    }
    // TODO: add more languages
}




// ===============================================================================
// Triangles

// Usage:
//     .box:after {
//         _triangle(
//               $dir,       // <-- top, bottom, left, right.
//               $color,     // arrow color
//               $h,         // the "Length" of the arrow.
//               $w,         // total width of the arrow. (Defaults to twice the @height)
//               $pos,       // sideways placement along the edge of the container. (Defaults to 50%.)
//               $posFrom,   // edge from which the side-offset is calculated. (Defaults to left or top respectively.)
//               $shift      // shift along the "height" axis, away or towards the container. (Defaults to 0)
//             );
//     }
_triangle($dir=top, $color=#fff, $h=10px, $w=(2*$h), $pos=50%, $posFrom=null, $shift=0) {
    _triangleBasic();
    _triangleShape($dir, $color, $h, $w, $pos, $posFrom, $shift);
}
_triangleBasic() {
    content: '';
    width: 0;
    height: 0;
    min-width: 0;
    min-height: 0;
    position: absolute;
    border: 0 solid transparent;
}
_triangleShape($dir=top, $color=#fff, $h=10px, $w=(2*$h), $pos=50%, $posFrom=null, $shift=0) {
    $posFrom = $posFrom || ( isVertical($dir) ? left : top );

    {$dir}: - $h;
    {$posFrom}: $pos;
    margin: (- $w/2);
    margin-{$dir}: - $shift;
    border-width: isVertical($dir) ? $h ($w/2) : ($w/2) $h;
    border-{opposite-position($dir)}-color: $color;
    border-{$dir}-width: 0;
}




// ===============================================================================
// Misc

// screen-reader friendly off-screen hiding
_tuck() {
    position: absolute;
    right: 9999px;
    left: auto;
}

// screen-reader- and rtl-friendly off-screen hiding
_sr-only( $mode=normal ) {
    position: absolute;
    width: 1px;
    height: 1px;
    overflow: hidden;
    clip: rect(0,0,0,0);
    opacity: 0.00001;
    pointer-events: none;
    margin: 0  if $mode!=soft;
}
// undo _sr-only() on :focus and :active
_sr-only-focusable( $mode=normal ) {
    &:active,
    &:focus {
        z-index: 99999;
        width: auto;
        height: auto;
        overflow: visible;
        clip: auto;
        opacity: 1;
        pointer-events: auto;
        margin: 0  if $mode!=soft;
    }
}


_afterClear() {
    &:after {
        content: ' ';
        clear: both;
        display: block;
        height: 0;
    }
}


// Hide element's text for image or ::before icon replacement
//
//   _hideText(soft);
//      Applies nowrap + hide overflow.
//      Great for ::before inline-block icons.
//
//   _hideText();
//   _hideText(normal);
//      `soft` + indents text into the overflow
//      Great for most background-image applications
//
//   _hideText(hard);
//      `normal` + transparency + collapsed letter-spacing.
//      Verbose version for weird edge-cases, with
//      long paragraphs of text and/or cases where
//      nasty inherited text-styling causes trouble.
//
_hideText( $mode=normal ) {
    overflow: hidden;
    white-space: nowrap;
    if ($mode != soft) {
        text-indent: 150%;
        text-align: left;
    }
    if ($mode == hard) {
        letter-spacing: -0.4em;
        text-shadow: none !important;
        color: transparent !important;
    }
}



// reset <button> styles for easier custom styling
_buttonReset() {
    border: 0;
    padding: 0;
    background-color: transparent;
    font-size: inherit;
    line-height: inherit;
    text-align: inherit;
    color: inherit;
    cursor: pointer;

    &:focus {
        outline: none;
        box-shadow: none;
    }
}


// =======================================================
// Column-based calc functions
//
// These globals are required for them to work:
//   * $gutter
//   * $column
//   * $numCols

// percentage length - by columns
//   $w = custom container width in pixels. When specified, this overrides the default column-based container width.
//   $px = pixel-based modifier for the column-based container width. (Useful for gridded-containers with non-standard padding/margin)
cols_pct( $nCol, $nGutter=($nCol - _one($nCol)), $nOfCol=$numCols, $nOfGutter=($nOfCol - _one($nOfCol)), $w=null, $px=0 )
    $w = $w  ||  ($nOfCol*$column + $nOfGutter*$gutter + $px);
    return (100 * ($nCol*$column + $nGutter*$gutter) / $w )%;

// percentage length - pixels to page-width
//   $px = pixel-based modifier for the column-based container width. (Useful for gridded-containers with non-standard padding/margin)
px_pct( $nPx, $nOfCol=$numCols, $nOfGutter=($nOfCol - _one($nOfCol)), $px=0 )
    return ( 100 * $nPx / ($nOfCol*$column + $nOfGutter*$gutter + $px) )%;

// pixel length - by columns
cols_px( $nCol, $nGutter=($nCol - _one($nCol)) )
    return ($nCol*$column + $nGutter*$gutter)px;

// =======================================================





// Transparent mixins to provide more powerful
// shorthand to margin|padding|border-width properties.
// The magic value token `_` instructs the mixin
// to skip that value.
// Usage:
//     margin: _ 10px;
// -->
//     margin-left: 10px
//     margin-right: 10px
margin() {
    __edgeProps('margin', arguments );
}
padding() {
    __edgeProps('padding', arguments );
}
border-width() {
    __edgeProps('border-width', arguments );
}
// Usage:
//     position: fixed _ 0;
// -->
//     position: fixed;
//     left: 0;
//     right: 0;
position( $pos, $edges... ) {
    if (typeof($pos)=='ident' && $pos!=_) {
        position: $pos;
        if ( length($edges) ) {
            __edgeProps('', $edges);
        }
    }
    else {
        __edgeProps( '', arguments );
    }
}
// Private use mixin used above
__edgeProps( $type, $sides ) {
    if ( !$type  ||  _ in $sides) {
        $type = $type ? $type+'-' : $type;
        $top = $sides[0];
        $right = length($sides)>1 ? $sides[1] : $top;
        $bottom = length($sides)>2 ? $sides[2] : $top;
        $left = length($sides)>3 ? $sides[3] : $right;

        {$type}top: $top   if $top!=_;
        {$type}bottom: $bottom   if $bottom!=_;
        {$type}left: $left   if $left!=_;
        {$type}right: $right   if $right!=_;
    } else {
        {$type}: $sides;
    }
}



fade($color, $opacity)
    return rgba( $color, alpha($color)*$opacity );

percent( $value )
    return (100*$value)%;

$pxem-base ?= 12;
pxem($px, $fs=$pxem-base)
    return ($px/$fs)em;

isVertical($dir)
    return $dir==top or $dir==bottom;

_one($n)
    // Returns -1 for values < 0 and 1 for values > 0.
    // Useful for multipliers
    return !$n ? 0 : ($n / abs($n));



csscalc($first, $rest...) {
    $first = '' + $first;
    if match('%s', $first) {
        $first = 'calc(' + $first + ')';
        return $first % $rest;
    }
    else {
        $values = $first;
        for $arg in $rest {
            $values = $values + ($arg<0 ? ' - ' : ' + ') + abs($arg);
        }
        return s('calc('+ $values +')');
    }
}

// depricated
cssadd() {
    return csscalc(arguments);
}

