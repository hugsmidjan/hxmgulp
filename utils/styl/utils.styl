// @media query based wrappers
media($query='screen', $allowFlatten=false) {
    if ($media-queries-support) {
        @media $query {
            {block}
        }
    }
    else if ($query in $media-queries-flatten  ||  $allowFlatten) {
        @media screen {
            {block}
        }
    }
}


$media-queries-support ?= true;
$media-queries-flatten ?= '';



// ===============================================================================
// Icons!
$iconfont_name ?=  'icons';
$iconfont_font-family ?= $iconfont_name, Arial, Helvetica, sans-serif;

_icon( $icon=null ) {
    if ($icon) {
        content: $icon;
    }
    display: inline-block;
    text-indent: 0;
    text-align: center;
    vertical-align: top;
    _iconFontStyling();
}

_iconFontStyling() {
    font-family: $iconfont_font-family;
    speak: none;
    font-weight: normal;
    font-style: normal;
    white-space: nowrap;
    -webkit-font-smoothing: antialiased; // fix for light text on dark background from beeing smudgy in webkit/mac
    -moz-osx-font-smoothing: grayscale;
    letter-spacing: 0;
}


$icon-bullet-disc =   "\2022";
$icon-bullet-square = "\25aa";

$icon-space-normal =  "\00a0"; // (NO-BREAK space) (0.28em)

$icon-space-half =    "\2002"; // 1/2em  (EN space
$icon-space-em =      "\2003"; // 1em    (EM space)
$icon-space-third =   "\2004"; // 1/3em  (THREE-PER-EM space)
$icon-space-fourth =  "\2005"; // 1/4em  (FOUR-PER-EM space)
$icon-space-sixth =   "\2006"; // 1/6em  (SIX-PER-EM space)
// $icon-space-figure =        "\2007";
// $icon-space-punctuation =   "\2008";
$icon-space-fifth =   "\2009"; // 1/5em  (THIN space)
$icon-space-hair =    "\200A"; // 1/12em (HAIR space)



// quote marks for use with blockquote
$quote_upper6 =   "\2018";
$quote_upper9 =   "\2019";
$quote_lower9 =   "\201a";
$quote_upper66 =  "\201c";
$quote_upper99 =  "\201d";
$quote_lower99 =  "\201e";
// icelandic
$quote_open_is =        $quote_lower99;
$quote_close_is =       $quote_upper66;
$quote_openSingle_is =  $quote_lower9;
$quote_closeSingle_is = $quote_upper6;
// english
$quote_open_en =        $quote_upper66;
$quote_close_en =       $quote_upper99;
$quote_openSingle_en =  $quote_upper6;
$quote_closeSingle_en = $quote_upper9;





// ===============================================================================
// Triangles

// Usage:
//     .box:after {
//         _triangle(
//               $dir,       // <-- top, bottom, left, right.
//               $color,     // arrow color
//               $h,         // the "Length" of the arrow.
//               $w,         // total width of the arrow. (Defaults to twice the @height)
//               $pos,       // sideways placement along the edge of the container. (Defaults to 50%.)
//               $posFrom,   // edge from which the side-offset is calculated. (Defaults to left or top respectively.)
//               $shift      // shift along the "height" axis, away or towards the container. (Defaults to 0)
//             );
//     }
_triangle($dir=top, $color=#fff, $h=10px, $w=null, $pos=50%, $posFrom=left, $shift=null) {
    _triangleBasic();
    _triangleShape($dir, $color, $h, $w, $pos, $posFrom, $shift);
}
_triangleBasic() {
    content: "";
    width: 0;
    height: 0;
    min-width: 0;
    min-height: 0;
    position: absolute;
    border: 0 solid transparent;
}
_triangleShape($dir=top, $color=#fff, $h=10px, $w=null, $pos=50%, $posFrom=null, $shift=0) {
    $w = (2*$h)  if $w==null;
    $posFrom = $posFrom || ( isVertical($dir) ? left : top );
    $dirInv = opposite-position($dir);

    {$dir}: - $h;
    {$posFrom}: $pos;
    margin: (- $w/2);
    margin-{$dir}: - $shift;
    border-width: isVertical($dir) ? $h ($w/2) : ($w/2) $h;
    border-{$dirInv}-color: $color;
    border-{$dir}-width: 0;
}




// ===============================================================================
// Misc

// screen-reader friendly off-screen hiding
_tuck() {
    position: absolute;
    right: 9999px;
    left: auto;
}

_afterClear() {
    &:after {
        content: " ";
        clear: both;
        display: block;
        height: 0;
    }
}


// generic image replacement
_hideText( $mode=normal ) {
    overflow: hidden;
    white-space: nowrap;
    if ($mode != soft) {
        text-indent: 150%;
        text-align: left;
    }
    if ($mode == hard) {
        letter-spacing: -0.4em;
        text-shadow: none !important;
        color: transparent !important;
    }
}



fade($color, $opacity)
    return rgba( $color, alpha($color)*$opacity );

percent( $value )
    return (100*$value)%;

pxem($px, $fs=12px)
    return ($px/$fs)em;

isVertical($dir)
    return $dir==top or $dir==bottom;
